using System.Collections.Generic;
using UnityEngine;
using Firebase.Database;
using Firebase.Extensions; // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∏ —ç—Ç–æ—Ç –Ω–µ–π–º—Å–ø–µ–π—Å
using UnityEngine.UI;
using TMPro;
using Firebase.Auth;

public class TestListLoader : MonoBehaviour
{
    public GameObject testCardPrefab;    // –ü—Ä–µ—Ñ–∞–± –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ—Å—Ç–∞
    public Transform cardContainer;       // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (Content –≤ ScrollView)
    public GameObject panelWithTestList;
    public GameObject passTestPanel; // –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    // –ü–∞–Ω–µ–ª—å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤

    [Header("Admin UI")]
    [Tooltip("–ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –ü–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∞.")]
    public Button addTestButton;
    [Tooltip("–ü–∞–Ω–µ–ª—å (—Ñ–æ—Ä–º–∞) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞.")]
    public GameObject addTestPanel;

    private DatabaseReference dbRef;
    private FirebaseAuth auth;
    private Dictionary<string, bool> completedTests = new Dictionary<string, bool>();
    private PassTestManager passTestManager;

    void Awake()
    {
        dbRef = FirebaseDatabase.DefaultInstance.RootReference;
        auth = FirebaseAuth.DefaultInstance;
        passTestManager = PassTestManager.Instance; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        GameEvents.OnMissionCompleted += HandleTestCompleted;
        AdminManager.OnAdminStatusChanged += HandleAdminStatusChange;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç"
        if (addTestButton != null)
        {
            addTestButton.onClick.AddListener(() => {
                if (addTestPanel != null)
                {
                    PanelManager.Instance.ShowOnly(addTestPanel);
                }
                else
                {
                    Debug.LogError("[TestListLoader] –ü–∞–Ω–µ–ª—å 'addTestPanel' –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
                }
            });
        }
    }

    void OnDestroy()
    {
        GameEvents.OnMissionCompleted -= HandleTestCompleted;
        AdminManager.OnAdminStatusChanged -= HandleAdminStatusChange; // –û—Ç–ø–∏—Å–∫–∞
    }

    void OnEnable()
    {
        //UpdateAdminUI(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
        LoadUserCompletionData();
    }

    private void HandleAdminStatusChange(bool isAdmin)
    {
        Debug.Log($"[TestListLoader] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ OnAdminStatusChanged. IsAdmin: {isAdmin}. –û–±–Ω–æ–≤–ª—è–µ–º UI...");
        UpdateAdminUI();
    }

    private void UpdateAdminUI()
    {
        if (addTestButton == null)
        {
            Debug.LogError("[TestListLoader] –ö–Ω–æ–ø–∫–∞ 'addTestButton' –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
            return;
        }
        bool isAdmin = AdminManager.Instance != null && AdminManager.Instance.IsAdmin;
        addTestButton.gameObject.SetActive(isAdmin);
    }

    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–æ–π –∏–∑ KnowledgeBaseUIManager
    public void ShowTests()
    {
        if (PanelManager.Instance != null)
        {
            // `this.gameObject` - —ç—Ç–æ –∏ –µ—Å—Ç—å panelWithTestList, —Ç.–∫. —Å–∫—Ä–∏–ø—Ç —Ç–µ–ø–µ—Ä—å –Ω–∞ –Ω–µ–π
            PanelManager.Instance.ShowOnly(this.gameObject);
        }
        else
        {
            Debug.LogError("[TestListLoader] PanelManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
    }

    void LoadUserCompletionData()
    {
        if (auth.CurrentUser == null)
        {
            LoadTestsFromFirebase();
            return;
        }

        dbRef.Child("users").Child(auth.CurrentUser.UserId).Child("completedMissions").GetValueAsync().ContinueWithOnMainThread(task =>
        {
            completedTests.Clear();
            if (task.IsCompletedSuccessfully && task.Result.Exists)
            {
                foreach (var child in task.Result.Children)
                {
                    completedTests[child.Key] = true;
                }
            }
            LoadTestsFromFirebase();
        });
    }

    void LoadTestsFromFirebase()
    {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö
        foreach (Transform child in cardContainer)
            Destroy(child.gameObject);

        FirebaseDatabase.DefaultInstance
            .GetReference("tests")
            .GetValueAsync()
            .ContinueWithOnMainThread(task =>
            {
                if (task.IsCompleted)
                {
                    DataSnapshot snapshot = task.Result;
                    foreach (var test in snapshot.Children)
                    {
                        string testId = test.Key;
                        string title = test.Child("title").Value?.ToString();

                        Debug.Log("üß© –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è: " + title);

                        GameObject card = Instantiate(testCardPrefab, cardContainer);
                        var ui = card.GetComponent<TestCardUI>();
                        var buttonText = ui.startButton.GetComponentInChildren<TMP_Text>();

                        ui.passTestPanel = passTestPanel;

                        if (completedTests.ContainsKey(testId))
                        {
                            // –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω - –±–ª–æ–∫–∏—Ä—É–µ–º
                            ui.startButton.interactable = false;
                            if(buttonText != null) buttonText.text = "–ü—Ä–æ–π–¥–µ–Ω–æ";
                        }
                        else
                        {
                             if(buttonText != null) buttonText.text = "–ù–∞—á–∞—Ç—å";
                        }

                        // ‚ùóÔ∏è–ü–†–û–í–ï–†–ö–ò
                        if (ui.passTestPanel == null)
                            Debug.LogError("‚ùå passTestPanel –Ω–µ –∑–∞–¥–∞–Ω —É –∫–∞—Ä—Ç–æ—á–∫–∏: " + title);

                        // –í—ã–∑–æ–≤ Setup
                        ui.Setup(testId, title, passTestPanel, passTestManager, panelWithTestList);

                    }
                }
                else if (task.IsFaulted)
                {
                    Debug.LogError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤: " + task.Exception);
                }
            });
    }

    private void HandleTestCompleted(string testId)
    {
        Debug.Log($"[TestListLoader] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {testId}. –î–æ–±–∞–≤–ª—è—é –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫.");
        if (!completedTests.ContainsKey(testId))
        {
            completedTests.Add(testId, true);
        }
    }
}
